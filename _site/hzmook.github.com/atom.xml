<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>hzmook</title>
 <link href="http://hzmook.github.com/atom.xml" rel="self"/>
 <link href="http://hzmook.github.com/"/>
 <updated>2013-03-21T12:39:22+08:00</updated>
 <id>http://hzmook.github.com/</id>
 <author>
   <name>hzmook</name>
   <email>hzmook@gmail.com</email>
 </author>
 
 
 <entry>
   <title>VIM常用命令</title>
   <link href="http://hzmook.github.com/hzmook.github.com/2012/08/06/vim-common-command.html"/>
   <updated>2012-08-06T00:00:00+08:00</updated>
   <id>http://hzmook.github.com/hzmook.github.com/2012/08/06/vim-common-command</id>
   <content type="html">&lt;h4&gt;插入模式&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;i = insert mode at cursor
I = insert at the beginning of line
a = append after the cursor
A = append at the end of the line
o = open blank line below current line
O = open blank line above current line
Esc = exit insert mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;光标移动&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;h,j,k,l = ←, ↓, ↑, →
ctrl+f = 下一页(forward)
ctrl+b = 上一页(backward)
w = 跳到下一个单词的开头
W = 跳到下一个单词(空白分隔)的开头
e = 跳到下一个单词的末尾
E = 跳到下一个单词(空白分隔)的末尾
b = 跳到前一个单词的开头
B = 跳到前一个单词(空白分隔)的开头
0 = 跳到本行行头
$ = 跳到本行行尾
^ = 跳到本行第一个非空白字符
g_ = 跳到本行最后一个非空白字符
gg = 跳到第一行
G = 跳到最后一行
[N]G = 跳到第N行
`. = 跳到最后编辑的地方
* = 向下查找当前光标所在位置的字符串
# = 向上查找当前光标所在位置的字符串
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;编辑&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;u = undo
ctrl+r = redo
~ = switch case
&amp;gt;&amp;gt; = indent line one column right
&amp;lt;&amp;lt; = indent line one column left
== = auto-indent current line
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;剪切与粘贴&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;dd = 删除当前行，并把删除的行存到剪贴板里
x = 删除当前字符
X = 删除前一个字符
dw = delete to end of word
D = delete to end of line
yy = 复制当前行
[N]yy = 复制N行
yw = copy to end of word
y$ = copy to end of line
p = 在光标位置之后粘贴
P = 在光标位置之前粘贴
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;查找&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;/pattern = search for pattern
?pattern = search backwards for pattern
n = repeat search in same direction
N = repeat search in opposite direction
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;退出&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;:w = 保存
:wq = 保存并退出
:x = 保存并退出
:q = 退出，有改动未保存时退出失败
:q! = 强制退出
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/images/post/vim.png&quot;&gt;VIM CheetSheet&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
 </entry>
 
 <entry>
   <title>一个DISQUS的使用问题</title>
   <link href="http://hzmook.github.com/hzmook.github.com/2012/07/04/a-disqus-use-problem.html"/>
   <updated>2012-07-04T00:00:00+08:00</updated>
   <id>http://hzmook.github.com/hzmook.github.com/2012/07/04/a-disqus-use-problem</id>
   <content type="html">&lt;p&gt;初次使用DISQUS。&lt;/p&gt;

&lt;p&gt;有评论的页面中还是显示“0 Comments 和 0 Reactions”，郁闷了很久。&lt;/p&gt;

&lt;p&gt;今天终于找到了原因，将下面这一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var disqus_url = &quot;http://hzmook.github.com//hzmook.github.com/2012/07/04/a-disqus-use-problem.html&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var disqus_url = &quot;http://hzmook.github.com/hzmook.github.com/2012/07/04/a-disqus-use-problem.html&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;，即后者比前者少一个“/”，即可。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用Jekyll在Github上搭建博客</title>
   <link href="http://hzmook.github.com/hzmook.github.com/2012/07/01/use-jekyll-build-blog-on-github.html"/>
   <updated>2012-07-01T00:00:00+08:00</updated>
   <id>http://hzmook.github.com/hzmook.github.com/2012/07/01/use-jekyll-build-blog-on-github</id>
   <content type="html">&lt;p&gt;Jekyll是一个使用Ruby编写的静态站点生成工具，使用Liquid模板渲染引擎，支持Markdown和Textile标记语言，并且可以为所有以 .html、.markdown、.textile扩展名结尾的文件使用YAML配置，内置语法高亮功能。而Github的Pages服务可以为每个Github主机上的仓库提供静态页面服务，并且Pages服务支持Jekyll。因为Github Pages有两种Pages，分别是用户页面和项目页面，所以我们可以使用用户页面来创建自己的Blog。&lt;/p&gt;

&lt;p&gt;在开始前，请确保你已经有了Github账号和Git的正确配置。没有的朋友可以先移步&lt;a href=&quot;https://github.com/plans&quot;&gt;Github注册&lt;/a&gt;并&lt;a href=&quot;http://help.github.com/win-set-up-git/&quot;&gt;安装配置Git&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先，创建你的 Blog 仓库 username(请确保跟你的账号名相同).github.com:&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ mkdir username.github.com
  $ cd username.github.com&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;新建一个 index.html 文件，像下面这样:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='html'&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;初始化仓库、提交并push到Github:&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ git init
  $ git add .
  $ git commit -a -m 'init commit.'
  $ git remote add origin
  $ git push origin master&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;现在你打开 username.github.com 就可以看到刚才新建的页面了，就是这么简单。当然也可以为你的Blog仓库绑定独立域名，具体做法就是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在你的仓库中新建内容为 www.youdomain.com 的 CNAME 文件；&lt;/li&gt;
&lt;li&gt;在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型.&lt;/li&gt;
&lt;/ol&gt;


&lt;p class=&quot;note&quot;&gt;*Note：如果你在CNAME中填写的是顶级域名，就得设置DNS的记录类别为A(Host)型，并设置主机为207.97.227.245。详细介绍请移步Github的&lt;a href=&quot;http://pages.github.com&quot;&gt;Pages&lt;/a&gt;页面。&lt;/p&gt;


&lt;p&gt;接下来我们只需要按照自己的喜好设计页面。首先认识下Jekyll的文件及目录配置:&lt;/p&gt;

&lt;pre&gt;
  .
  |-- _config.yml
  |-- _includes
  |-- _layouts
  |   |-- default.html
  |   `-- post.html
  |-- _plugins
  |-- _posts
  |   |-- yyyy-mm-dd-title.markdown
  |   `-- yyyy-mm-dd-title.markdown
  |-- _site
  `-- index.html
&lt;/pre&gt;


&lt;h3&gt;_config.yml&lt;/h3&gt;

&lt;p&gt;保存Jekyll配置的文件。虽然绝大部分选项可以通过命令行参数指定，但将它们写入配置文件可以使你在每次执行时不必记住它们。&lt;/p&gt;

&lt;h3&gt;_includes&lt;/h3&gt;

&lt;p&gt;该目录存放可以与&lt;em&gt;layouts和&lt;/em&gt;posts混合、匹配并重用的文件。Liquid标签{&amp;#37; include file.ext &amp;#37;}可以用于嵌入文件_includes/file.ext。&lt;/p&gt;

&lt;h3&gt;_layouts&lt;/h3&gt;

&lt;p&gt;该目录存放用来插入帖子的网页布局模板。页面布局基于类似博客平台的“一个帖子接一个帖子”的原则，通过YAML前置数据定义。Liquid标签用于在页面上插入帖子的文本内容。&lt;/p&gt;

&lt;h3&gt;_plugins&lt;/h3&gt;

&lt;p&gt;可以增加你自己的插件。&lt;/p&gt;

&lt;h3&gt;_posts&lt;/h3&gt;

&lt;p&gt;该目录下存放的可以说成是你的“动态内容”。这些文件的格式很重要，它们的文件命名一定要遵循 yyyy-mm-dd-title.html|markdown|textile 规则。每一个帖子的固定链接URL可以作弹性的调整，但帖子的发布日期和转换所使用的标记语言会根据且仅根据文件名中的相应部分来识别。&lt;/p&gt;

&lt;h3&gt;_site&lt;/h3&gt;

&lt;p&gt;Jekyll自动生成的，所以可以忽略，如果你有在本地安装Jekyll并预览了的话，可以使用.gitignore设置Git停止对本目录的跟踪。&lt;/p&gt;

&lt;h3&gt;index.html 和所有的 HTML/Markdown/Textile 文件&lt;/h3&gt;

&lt;p&gt;所有的HTML/Markdown/Textile文件都可以包含 YAML 配置，这类文件都会被Jekyll解析。&lt;/p&gt;

&lt;p&gt;现在你可以在自己的仓库中配置好你自己的目录及文件，也可以clone我的仓库，然后修改。&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ git clone https://github.com/hzmook/hzmook.github.com.git&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;修改完后就可以push你的代码到Github上，看到结果了。刚才有说到本地预览，如果你想在本地预览后，确保没错误再push的话，就需要在本地安装Jekyll，下面介绍下Jekyll的安装方法。&lt;/p&gt;

&lt;p&gt;一、安装Ruby运行环境和RubyGem:Windows用户只要下载 &lt;a href=&quot;http://rubyforge.org/frs/download.php/74298/rubyinstaller-1.9.2-p180.exe&quot; title=&quot;点击下载&quot;&gt;RubyInstaller&lt;/a&gt;。下载安装后请手动升级gem.&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ gem update --system&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;二、安装DevKit。DevKit是windows平台编译和使用本地C/C++扩展包工具。用来模拟Linux平台下的 &lt;code&gt;make,gcc,sh&lt;/code&gt; 进行编译。下载文件后，解压到 `C:\DevKit'，再通过命令行安装:&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ cd C:\DevKit
  $ ruby dk.rb init
  $ ruby dk.rb install&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;三、安装并检查刚才的DevKit安装是否成功。如果成功安装，则DevKit也就安装成功，如果不成功，请重新安装DevKit。&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ gem install jekyll&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;四、安装Rdiscount，这个是用来解析Markdown标记的解析包。如果你使用Textile的话，就是安装Kramdown。&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;$ gem install rdiscount&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;所有的环境和依赖包都安装成功后，进入你的仓库目录，用下面的命令便可启动Jekyll，并在本地预览了，预览地址默认为 &lt;code&gt;127.0.0.1:4000&lt;/code&gt;，当然你也可以通过 _config.yml 配置:&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;jekyll --server&lt;/code&gt;
&lt;/pre&gt;


&lt;h3&gt;补充：Windows平台上的中文支持&lt;/h3&gt;

&lt;p&gt;在Windows平台上，如果出现类似如下的错误信息：&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;c:/Ruby192/lib/ruby/gems/1.9.1/gems/jekyll-0.11.0/lib/jekyll/convertible.rb:29:in `read_yaml’: invalid byte sequence in GBK (ArgumentError)
  ...&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;可能需要作如下修改：&lt;/p&gt;

&lt;p&gt;将文件&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;c:/Ruby192/lib/ruby/gems/1.9.1/gems/jekyll-0.11.0/lib/jekyll/convertible.rb&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;中的第27行的内容&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;self.content = File.read(File.join(base, name))&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;修改为&lt;/p&gt;

&lt;pre&gt;
  &lt;code&gt;self.content = File.read(File.join(base, name), :encoding =&gt; &quot;utf-8&quot;)&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;另外，你的日志等源码文件可能都需要保存为无“BOM”的“UTF-8”编码格式。&lt;/p&gt;

&lt;div style=&quot;margin-top:20px&quot;&gt;参考及相关资料：&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;http://pages.github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;https://github.com/mojombo/jekyll/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.envylabs.com/2009/08/publishing-a-blog-with-github-pages-and-jekyll/&quot;&gt;http://blog.envylabs.com/2009/08/publishing-a-blog-with-github-pages-and-jekyll/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chen.yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;http://chen.yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html&quot;&gt;http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>hello</title>
   <link href="http://hzmook.github.com/hzmook.github.com/2012/06/29/hello.html"/>
   <updated>2012-06-29T00:00:00+08:00</updated>
   <id>http://hzmook.github.com/hzmook.github.com/2012/06/29/hello</id>
   <content type="html">&lt;p&gt;Congratulation! It works.&lt;/p&gt;

&lt;p&gt;Thanks github, jekyll, etc.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
